@page "/groups"

@using Microsoft.AspNetCore;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers;
@using Members.DTOs;

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <PageTitle>Groups</PageTitle>

        <h3>Groups</h3>

        @if (groups == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="accordion" id="membersAccordionPanels">
                @foreach (var group in groups)
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@group.Name-collapseOne" aria-expanded="true"
                                    aria-controls="@group.Name-collapseOne">
                                @group.Name
                            </button>
                        </h2>
                        <div id="@group.Name-collapseOne" class="accordion-collapse collapse show">
                            <div class="accordion-body">
                                @if (group.Members == null)
                                {
                                    <p>Empty group...</p>
                                }
                                else
                                {
                                    @foreach (var member in group.Members)
                                    {
                                        <p>@member.Name</p>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <p>Requested by: @context.User.Identity?.Name (@GetUsernameAsync().Result)</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You have no access to this page. Please, <a href="authentication/login">Log in</a>.</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    private Group[]? groups;

    protected override async Task OnInitializedAsync()
    {
        var result = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions { Scopes = new[] { 
                "api://4b246dd8-e427-4911-b150-7cf977ada3e1/members.get"
            } });

        //var result = await TokenProvider.RequestAccessToken();

        if ( result.TryGetToken( out var token ) )
        {
            Http.DefaultRequestHeaders.Authorization = 
                new AuthenticationHeaderValue( "Bearer", token.Value );

            groups = await Http.GetFromJsonAsync<Group[]>("http://localhost:5273/api/Groups");
        }
    }

    protected async Task<string> GetUsernameAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated)
        {
            var username = state.User.FindFirst("preferred_username")?.Value;
            if (username != null) return username;
        }
        return string.Empty;
    }
}
